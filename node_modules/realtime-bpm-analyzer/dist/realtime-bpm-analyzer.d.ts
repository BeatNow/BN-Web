import type { RealTimeBpmAnalyzerOptions, RealTimeBpmAnalyzerParameters, ValidPeaks, NextIndexPeaks, Threshold, RealtimeFindPeaksOptions, RealtimeAnalyzeChunkOptions } from './types';
export declare class RealTimeBpmAnalyzer {
    /**
     * Default configuration
     */
    options: RealTimeBpmAnalyzerOptions;
    /**
     * Minimum valid threshold, below this level result would be irrelevant.
     */
    minValidThreshold: Threshold;
    /**
     * Contain all valid peaks
     */
    validPeaks: ValidPeaks;
    /**
     * Next index (+10000 ...) to take care about peaks
     */
    nextIndexPeaks: NextIndexPeaks;
    /**
     * Number / Position of chunks
     */
    skipIndexes: number;
    effectiveBufferTime: number;
    /**
     * Computed values
     */
    computedStabilizationTimeInSeconds: number;
    constructor(options?: RealTimeBpmAnalyzerParameters);
    /**
     * Update the computed values
     */
    updateComputedValues(): void;
    /**
     * Reset BPM computation properties to get a fresh start
     */
    reset(): void;
    /**
     * Remve all validPeaks between the minThreshold pass in param to optimize the weight of datas
     * @param minThreshold - Value between 0.9 and 0.2
     */
    clearValidPeaks(minThreshold: Threshold): Promise<void>;
    /**
     * Attach this function to an audioprocess event on a audio/video node to compute BPM / Tempo in realtime
     * @param options - RealtimeAnalyzeChunkOptions
     * @param options.audioSampleRate - Audio sample rate (44100)
     * @param options.channelData - Channel data
     * @param options.bufferSize - Buffer size (4096)
     * @param options.postMessage - Function to post a message to the processor node
     */
    analyzeChunck({ audioSampleRate, channelData, bufferSize, postMessage }: RealtimeAnalyzeChunkOptions): Promise<void>;
    /**
     * Find the best threshold with enought peaks
     * @param options - Options for finding peaks
     * @param options.audioSampleRate - Sample rate
     * @param options.channelData - Channel data
     * @param options.bufferSize - Buffer size
     * @param options.currentMinIndex - Current minimum index
     * @param options.currentMaxIndex - Current maximum index
     * @param options.postMessage - Function to post a message to the processor node
     */
    findPeaks({ audioSampleRate, channelData, bufferSize, currentMinIndex, currentMaxIndex, postMessage, }: RealtimeFindPeaksOptions): Promise<void>;
}
